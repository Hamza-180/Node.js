// Type definitions for inspector

// These definitions are auto-generated.
// Please see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19330
// for more information.

import EventEmitter from 'node:events';
import {
  CallArgument,
  CallFrame,
  Debugger,
  DebuggerEvent,
  ExceptionDetails,
  ExecutionContextDescription,
  ExecutionContextId,
  HeapSnapshotObjectId,
  Location,
  Profiler,
  ProfilerEvent,
  RemoteObject,
  Runtime,
  ScriptId,
  ScriptPosition,
  SearchMatch,
  Session,
  StackTrace,
  StackTraceId,
  TypeObject,
  TypeProfileEntry,
  WorkerID,
} from 'inspector';

declare module 'inspector' {
  import EventEmitter = require('node:events');

  namespace Schema {
    /**
     * Description of the protocol domain.
     */
    interface Domain {
      /**
       * Domain name.
       */
      name: string;
      /**
       * Domain version.
       */
      version: string;
    }

    interface GetDomainsReturnType {
      /**
       * List of supported domains.
       */
      domains: Domain[];
    }
  }

  namespace Runtime {
    /**
     * Unique script identifier.
     */
    type ScriptId = string;

    /**
     * Unique object identifier.
     */
    type RemoteObjectId = string;

    /**
     * Primitive value which cannot be JSON-stringified.
     */
    type UnserializableValue = string;

    /**
     * Mirror object referencing original JavaScript object.
     */
    interface RemoteObject {
      /**
       * Object type.
       */
      type: string;
      /**
       * Object subtype hint. Specified for <code>object</code> type values only.
       */
      subtype?: string | undefined;
      /**
       * Object class (constructor) name. Specified for <code>object</code> type values only.
       */
      className?: string | undefined;
      /**
       * Remote object value in case of primitive values or JSON values (if it was requested).
       */
      value?: any;
      /**
       * Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.
       */
      unserializableValue?: UnserializableValue | undefined;
      /**
       * String representation of the object.
       */
      description?: string | undefined;
      /**
       * Unique object identifier (for non-primitive values).
       */
      objectId?: RemoteObjectId | undefined;
      /**
       * Preview containing abbreviated property values. Specified for <code>object</code> type values only.
       * @experimental
       */
      preview?: ObjectPreview | undefined;
      /**
       * @experimental
       */
      customPreview?: CustomPreview | undefined;
    }

    /**
     * @experimental
     */
    interface CustomPreview {
      header: string;
      hasBody: boolean;
      formatterObjectId: RemoteObjectId;
      bindRemoteObjectFunctionId: RemoteObjectId;
      configObjectId?: RemoteObjectId | undefined;
    }

    /**
     * Object containing abbreviated remote object value.
     * @experimental
     */
    interface ObjectPreview {
      /**
       * Object type.
       */
      type: string;
      /**
       * Object subtype hint. Specified for <code>object</code> type values only.
       */
      subtype?: string | undefined;
      /**
       * String representation of the object.
       */
      description?: string | undefined;
      /**
       * True iff some of the properties or entries of the original object did not fit.
       */
      overflow: boolean;
      /**
       * List of the properties.
       */
      properties: PropertyPreview[];
      /**
       * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.
       */
      entries?: EntryPreview[] | undefined;
    }

    /**
     * @experimental
     */
    interface PropertyPreview {
      /**
       * Property name.
       */
      name: string;
      /**
       * Object type. Accessor means that the property itself is an accessor property.
       */
      type: string;
      /**
       * User-friendly property value string.
       */
      value?: string | undefined;
      /**
       * Nested value preview.
       */
      valuePreview?: ObjectPreview | undefined;
      /**
       * Object subtype hint. Specified for <code>object</code> type values only.
       */
      subtype?: string | undefined;
    }

    /**
     * @experimental
     */
    interface EntryPreview {
      /**
       * Preview of the key. Specified for map-like collection entries.
       */
      key?: ObjectPreview | undefined;
      /**
       * Preview of the value.
       */
      value: ObjectPreview;
    }

    /**
     * Object property descriptor.
     */
    interface PropertyDescriptor {
      /**
       * Property name or symbol description.
       */
      name: string;
      /**
       * The value associated with the property.
       */
      value?: RemoteObject | undefined;
      /**
       * True if the value associated with the property may be changed (data descriptors only).
       */
      writable?: boolean | undefined;
      /**
       * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).
       */
      get?: RemoteObject | undefined;
      /**
       * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).
       */
      set?: RemoteObject | undefined;
      /**
       * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.
       */
      configurable: boolean
