/**
 * The `timer` module exposes a global API for scheduling functions to
 * be called at some future period of time. Because the timer functions are
 * globals, there is no need to call `require('node:timers')` to use the API.
 *
 * The timer functions within Node.js implement a similar API as the timers API
 * provided by Web Browsers but use a different internal implementation that is
 * built around the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout).
 * @see [source](https://github.com/nodejs/node/blob/v20.2.0/lib/timers.js)
 */
declare module "timers" {
    import { Abortable } from "node:events";
    import {
        setImmediate as setImmediatePromise,
        setInterval as setIntervalPromise,
        setTimeout as setTimeoutPromise,
    } from "node:timers/promises";
    interface TimerOptions extends Abortable {
        /**
         * Set to `false` to indicate that the scheduled `Timeout`
         * should not require the Node.js event loop to remain active.
         * @default true
         */
        ref?: boolean | undefined;
    }
    let setTimeout: (
        callback: (...args: any[]) => void,
        delay: number,
        ...args: any[]
    ) => NodeJS.Timeout;
    let clearTimeout: (timeout: NodeJS.Timeout | string | number | undefined) => void;
    let setInterval: (
        callback: (...args: any[]) => void,
        delay: number,
        ...args: any[]
    ) => NodeJS.Timeout;
    let clearInterval: (interval: NodeJS.Timeout | string | number | undefined) => void;
    let setImmediate: (
        callback: (...args: any[]) => void,
        ...args: any[]
    ) => NodeJS.Immediate;
    let clearImmediate: (
        immediate: NodeJS.Immediate | string | number | undefined
    ) => void;
    interface Immediate extends NodeJS.Immediate {
        ref(): this;
        unref(): this;
        hasRef(): boolean;
        [Symbol.dispose](): void;
    }
    interface Timeout extends NodeJS.Timeout {
        ref(): this;
        unref(): this;
        hasRef(): boolean;
        refresh(): this;
        [Symbol.dispose](): void;
    }
    global {
        namespace NodeJS {
            // compatibility with older typings
            interface Timer extends RefCounted {
                hasRef(): boolean;
                refresh(): this;
                [Symbol.toPrimitive](): number;
            }
            class Immediate implements RefCounted {
                constructor(callback: (...args: any[]) => void, args?: any[]);
                ref(): this;
                unref(): this;
                hasRef(): boolean;
                [Symbol.dispose](): void;
                private _idleTimeout;
                private _idlePrev;
                private _idleNext;
                private _onImmediate;
                private _idleExpiry;
                private _idleDefer;
                private _onImmediateTimer;
                private _destroyed;
                private _called;
                private _hasRef;
                private _unrefed;
                private _idleAdd();
                private _idleRemove();
                private _unrefActive();
                private _refActive();
                private _idleExpire();
                private _destroy(err?: Error | null);
                private _runIfPresent();
                private _callImmediate(callback: (...args: any[]) => void);
            }
            class Timeout implements Timer {
                constructor(callback: (...args: any[]) => void, delay: number, args?: any[]);
                ref(): this;
                unref(): this;
                hasRef(): boolean;
                refresh(): this;
                [Symbol.dispose](): void;
                private _idleTimeout;
                private _idlePrev;
                private _idleNext;
                private _onTimeout;
                private _idleExpiry;
                private _idleDefer;
                private _onTimeoutTimer;
                private _destroyed;
                private _called;
                private _hasRef;
                private _unrefed;
                private _idleAdd();
                private _idleRemove();
                private _unrefActive();
                private _refActive();
                private _idleExpire();
                private _destroy(err?: Error | null);
                private _runIfPresent();
                private _callTimeout(callback: (...args: any[]) => void);
            }
        }
    }
    export {
        setTimeout,
        clearTimeout,
        setInterval,
        clearInterval,
        setImmediate,
        clearImmediate,
        queueMicrotask,
    };
}
declare module "node:timers" {
    export * from "timers";
}
