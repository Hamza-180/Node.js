/**
 * The `node:child_process` module provides the ability to spawn subprocesses in
 * a manner that is similar, but not identical, to [`popen(3)`](http://man7.org/linux/man-pages/man3/popen.3.html). This capability
 * is primarily provided by the {@link spawn} function.
 *
 * @see [source](https://github.com/nodejs/node/blob/v20.2.0/lib/child_process.js)
 * @module node:child_process
 */

import { Abortable, EventEmitter } from "node:events";
import * as net from "node:net";
import { Pipe, Readable, Stream, Writable } from "node:stream";
import { URL } from "node:url";
type Serializable = string | object | number | boolean | bigint;
type SendHandle = net.Socket | net.Server;

/**
 * Instances of the `ChildProcess` represent spawned child processes.
 *
 * Instances of `ChildProcess` are not intended to be created directly. Rather,
 * use the {@link spawn}, {@link exec},{@link execFile}, or {@link fork} methods to create
 * instances of `ChildProcess`.
 * @since v2.2.0
 */
export class ChildProcess extends EventEmitter {
    // ... (rest of the class implementation)
}

// ... (rest of the module implementation)

/**
 * The `child_process.spawn()` method spawns a new process using the given`command`, with command-line arguments in `args`. If omitted, `args` defaults
 * to an empty array.
 *
 * @since v0.1.90
 * @param command The command to run.
 * @param args List of string arguments.
 * @return A new instance of `ChildProcessWithoutNullStreams`.
 */
export function spawn(command: string, args?: readonly string[]): ChildProcessWithoutNullStreams;

// ... (rest of the spawn function overloads)

/**
 * Spawns a shell then executes the `command` within that shell, buffering any
 * generated output. The `command` string passed to the exec function is processed
 * directly by the shell and special characters (vary based on [shell](https://en.wikipedia.org/wiki/List_of_command-line_interpreters))
 * need to be dealt with accordingly.
 *
 * @since v0.1.90
 * @param command The command to run, with space-separated arguments.
 * @param callback called with the output when process terminates.
 */
export function exec(
    command: string,
    callback?: (error: ExecException | null, stdout: string, stderr: string) => void,
): ChildProcess;

// ... (rest of the exec function overloads)

/**
 * The `child_process.execFile()` function is similar to {@link exec} except that it does not spawn a shell by default. Rather, the specified
 * executable `file` is spawned directly as a new process making it slightly more
 * efficient than {@link exec}.
 *
 * @since v0.1.91
 * @param file The name or path of the executable file to run.
 * @param args List of string arguments.
 * @param callback Called with the output when process terminates.
 */
export function execFile(
    file: string,
    args?: readonly string[],
    callback?: (error: ExecFileException | null, stdout: string, stderr: string) => void,
): ChildProcess;

// ... (rest of the execFile function overloads)

/**
 * The `child_process.fork()` method is a special case of {@link spawn} used specifically to spawn new Node.js processes.
 * Like {@link spawn}, a `ChildProcess` object is returned. The
 * returned `ChildProcess` will have an additional communication channel
 * built-in that allows messages to be passed back and forth between the parent and
 * child. See `subprocess.send()` for details.
 *
 * @since v0.5.0
 * @param modulePath The module to run in the child.
 * @param args List of string arguments.
 */
export function fork(modulePath: string, args?: readonly string[]): ChildProcess;

// ... (rest of the fork function overloads)

/**
 * The `child_process.spawnSync()` method is generally identical to {@link spawn} with the exception that the function will not return
 * until the child process has fully closed. When a timeout has been encountered
 * and `killSignal` is sent, the method won't return until the process has
 * completely exited. If the process intercepts and handles the `SIGTERM` signal
 * and doesn't exit, the parent process will wait until the child process has
 * exited.
 *
 * @since v0.11.12
 * @param command The command to run.
 * @param args List of string arguments.
 * @return The result of the spawned process.
 */
export function spawnSync(command: string, args?: readonly string[]): SpawnSyncReturns<string>;

// ... (rest of the spawnSync function overloads)

/**
 * The `child_process.execSync()` method is generally identical to {@link exec} with the exception that the method will not return
 * until the child process has fully closed. When a timeout has been encountered
 * and `killSignal` is sent, the method won't return until the process has
 * completely exited. If the child process intercepts and handles the `SIGTERM`signal and doesn't exit, the parent process will wait until the child process
 * has exited.
 *
 * @since v0.11.1
