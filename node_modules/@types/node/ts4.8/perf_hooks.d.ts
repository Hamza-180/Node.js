/**
 * This module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for
 * Node.js-specific performance measurements.
 *
 * Node.js supports the following [Web Performance APIs](https://w3c.github.io/perf-timing-primer/):
 *
 * * [High Resolution Time](https://www.w3.org/TR/hr-time-2)
 * * [Performance Timeline](https://w3c.github.io/performance-timeline/)
 * * [User Timing](https://www.w3.org/TR/user-timing/)
 * * [Resource Timing](https://www.w3.org/TR/resource-timing-2/)
 *
 * ```js
 * const { PerformanceObserver, performance } = require('node:perf_hooks');
 *
 * const obs = new PerformanceObserver((entries) => {
 *   console.log(entries[0].duration);
 *   performance.clearMarks();
 * });
 * obs.observe({ type: 'measure' });
 * performance.measure('Start to Now');
 *
 * performance.mark('A');
 * doSomeLongRunningProcess(() => {
 *   performance.measure('A to Now', 'A');
 *
 *   performance.mark('B');
 *   performance.measure('A to B', 'A', 'B');
 * });
 * ```
 * @see [source](https://github.com/nodejs/node/blob/v20.2.0/lib/perf_hooks.js)
 */

declare module "perf_hooks" {
  import { AsyncResource } from "node:async_hooks";
  type EntryType = "node" | "mark" | "measure" | "gc" | "function" | "http2" | "http";
  interface NodeGCPerformanceDetail {
    /**
     * When `performanceEntry.entryType` is equal to 'gc', `the performance.kind` property identifies
     * the type of garbage collection operation that occurred.
     * See perf_hooks.constants for valid values.
     */
    readonly kind?: number | undefined;
    /**
     * When `performanceEntry.entryType` is equal to 'gc', the `performance.flags`
     * property contains additional information about garbage collection operation.
    
