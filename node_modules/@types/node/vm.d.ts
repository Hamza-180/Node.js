/**
 * The `export` statements have been added to ensure that the types are available
 * for use in other modules.
 */

/**
 * The `vm` module enables compiling and running code within V8 Virtual
 * Machine contexts.
 *
 * **The `vm` module is not a security**
 * **mechanism. Do not use it to run untrusted code.**
 *
 * JavaScript code can be compiled and run immediately or
 * compiled, saved, and run later.
 *
 * A common use case is to run the code in a different V8 Context. This means
 * invoked code has a different global object than the invoking code.
 *
 * One can provide the context by `contextifying` an
 * object. The invoked code treats any property in the context like a
 * global variable. Any changes to global variables caused by the invoked
 * code are reflected in the context object.
 *
 * @see [source](https://github.com/nodejs/node/blob/v20.2.0/lib/vm.js)
 */

export interface Context extends NodeJS.Dict<any> {}

export interface BaseOptions {
  filename?: string | undefined;
  lineOffset?: number | undefined;
  columnOffset?: number | undefined;
}

export interface ScriptOptions extends BaseOptions {
  cachedData?: Buffer | NodeJS.ArrayBufferView | undefined;
  produceCachedData?: boolean | undefined;
  importModuleDynamically?:
    | ((specifier: string, script: Script, importAttributes: ImportAttributes) => Module)
    | undefined;
}

export interface RunningScriptOptions extends BaseOptions {
  displayErrors?: boolean | undefined;
  timeout?: number | undefined;
  breakOnSigint?: boolean | undefined;
}

export interface RunningScriptInNewContextOptions extends RunningScriptOptions {
  contextName?: CreateContextOptions["name"];
  contextOrigin?: CreateContextOptions["origin"];
  contextCodeGeneration?: CreateContextOptions["codeGeneration"];
  microtaskMode?: CreateContextOptions["microtaskMode"];
}

export interface RunningCodeOptions extends RunningScriptOptions {
  cachedData?: ScriptOptions["cachedData"];
  importModuleDynamically?: ScriptOptions["importModuleDynamically"];
}

export interface RunningCodeInNewContextOptions extends RunningScriptInNewContextOptions {
  cachedData?: ScriptOptions["cachedData"];
  importModuleDynamically?: ScriptOptions["importModuleDynamically"];
}

export interface CompileFunctionOptions extends BaseOptions {
  cachedData?: Buffer | undefined;
  produceCachedData?: boolean | undefined;
  parsingContext?: Context | undefined;
  contextExtensions?: Object[] | undefined;
}

export interface CreateContextOptions {
  name?: string | undefined;
  origin?: string | undefined;
  codeGeneration?:
    | {
        strings?: Array<boolean> | undefined;
        wasm?: Array<boolean> | undefined;
      }
    | undefined;
  microtaskMode?: "afterEvaluate" | undefined;
}

export type MeasureMemoryMode = "summary" | "detailed";

export interface MeasureMemoryOptions {
  mode?: string | undefined;
  execution?: "default" | "eager" | undefined;
}

export interface MemoryMeasurement {
  total: {
    jsMemoryEstimate: number;
    jsMemoryRange: [number, number];
  };
}

/**
 * Instances of the `vm.Script` class contain precompiled scripts that can be
 * executed in specific contexts.
 * @since v0.3.1
 */
export class Script {
  constructor(code: string, options?: ScriptOptions | string);

  runInContext(contextifiedObject: Context, options?: RunningScriptOptions): any;

  runInNewContext(contextObject?: Context, options?: RunningScriptInNewContextOptions): any;

  runInThisContext(options?: RunningScriptOptions | string): any;

  createCachedData(): Buffer;

  cachedDataProduced?: boolean | undefined;

  cachedDataRejected?: boolean | undefined;

  cachedData?: Buffer | undefined;

  sourceMapURL?: string | undefined;
}

/**
 * If given a `contextObject`, the `vm.createContext()` method will `prepare
 * that object` so that it can be used in calls to {@link runInContext} or `script.runInContext()`. Inside such scripts, the `contextObject` will be the global object, retaining all of its existing
 * properties but also having the built-in objects and functions any standard [global object](https://es5.github.io/#x15.1) has. Outside of scripts run by the vm module, global variables
 * will remain unchanged.
 *
 * @since v0.3.1
 * @return contextified object.
 */
export function createContext(sandbox?: Context, options?: CreateContextOptions): Context;

/**
 * Returns `true` if the given `object` object has been `contextified` using {@link createContext}.
 * @since v0.11.7
 */
export function isContext(sandbox: Context): boolean;

/**
 * The `vm.runInContext()` method compiles `code`, runs it within the context of
 * the `contextifiedObject`, then returns the result. Running code does not have
 * access to the local scope. The `contextifiedObject` object _must_ have been
 * previously `contextified` using the {@link createContext} method.
 *
 * If `options` is a string, then it specifies the filename.
 *
 * @since v0.3.1
 * @param code The JavaScript code to compile and run.
 * @param contextifiedObject The `contextified` object that will be used as the `global` when the `code` is compiled and run.
 * @return the result of the very last statement executed in the script.
 */
export function runInContext(code: string, contextifiedObject: Context, options?: RunningCodeOptions | string): any;

/**
 * The `vm.runInNewContext()` first contextifies the given `contextObject` (or
 * creates a new `contextObject` if passed as `undefined`), compiles the `code`,
 * runs it within the created context, then returns the result. Running code
 * does not have access to the local scope.
 *
 * If `options
