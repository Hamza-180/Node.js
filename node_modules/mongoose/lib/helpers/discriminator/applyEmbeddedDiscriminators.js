'use strict';

import { Schema } from 'mongoose';

/**
 * Applies embedded discriminators to the given schema.
 * @param schema - The schema to apply discriminators to.
 * @param seen - A set of schemas that have already been seen.
 */
function applyEmbeddedDiscriminators(schema: Schema, seen = new Set<Schema>()) {
  // Avoid infinite recursion by checking if the schema has already been seen
  if (seen.has(schema)) {
    return;
  }
  seen.add(schema);

  // Iterate over schema paths using for...of instead of Object.keys()
  for (const schemaPath of schema.paths) {
    const schemaType = schema.paths[schemaPath];

    // Skip non-schema types
    if (!schemaType.schema) {
      continue;
    }

    // Recursively apply discriminators to child schemas
    applyEmbeddedDiscriminators(schemaType.schema, seen);

    // Apply discriminator values to schema type
    if (schemaType.discriminatorValues) {
      for (const [discriminator, discriminatorValue] of schemaType.discriminatorValues) {
        schemaType.discriminator(discriminator, discriminatorValue);
      }
    }
  }
}

module.exports = applyEmbeddedDiscriminators;
