'use strict';

const isExclusive = require('../projection/isExclusive');
const isInclusive = require('../projection/isInclusive');

/**
 * Selects populated fields based on the given fields, user-provided fields, and populate options.
 * @param {Object} fields - The fields to select.
 * @param {Object|null|undefined} userProvidedFields - The user-provided fields.
 * @param {Object} populateOptions - The populate options.
 */
module.exports = function selectPopulatedFields(fields, userProvidedFields, populateOptions) {
  if (populateOptions == null) {
    throw new Error('Populate options cannot be null or undefined.');
  }

  const paths = Object.keys(populateOptions);

  // Initialize userProvidedFields if it's not provided
  userProvidedFields = userProvidedFields || {};

  if (isInclusive(fields)) {
    paths.forEach(path => {
      if (!isPathInFields(userProvidedFields, path)) {
        fields[path] = 1;
      } else if (userProvidedFields[path] === 0) {
        delete fields[path];
      }

      const refPath = populateOptions[path]?.refPath;
      if (typeof refPath === 'string') {
        if (!isPathInFields(userProvidedFields, refPath)) {
          fields[refPath] = 1;
        } else if (userProvidedFields[refPath] === 0) {
          delete fields[refPath];
        }
      }
    });
  } else if (isExclusive(fields)) {
    paths.forEach(path => {
      if (userProvidedFields[path] == null) {
        delete fields[path];
      }
      const refPath = populateOptions[path]?.refPath;
      if (typeof refPath === 'string' && userProvidedFields[refPath] == null) {
        delete fields[refPath];
      }
    });
  }
};

/**
 * Checks if a path exists in the user-provided fields.
 * @param {Object} userProvidedFields - The user-provided fields.
 * @param {string} path - The path to check.
 * @returns {boolean} True if the path exists in the user-provided fields, false otherwise.
 */
function isPathInFields(userProvidedFields, path) {
  const pieces = path.split
