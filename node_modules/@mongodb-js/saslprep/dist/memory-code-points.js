"use strict";

import { SparseBitfield } from "sparse-bitfield";
import codePointsData from "./code-points-data";

class CodePointsData {
  private data: Buffer;
  private offset: number;

  constructor(data: Buffer) {
    this.data = data;
    this.offset = 0;
  }

  readUInt32BE(): number {
    const value = this.data.readUInt32BE(this.offset);
    this.offset += 4;
    return value;
  }

  readBitfield(size: number): SparseBitfield {
    const codepoints = this.data.slice(this.offset, this.offset + size);
    this.offset += size;
    return new SparseBitfield({ buffer: codepoints });
  }
}

const codePointsDataInstance = new CodePointsData(codePointsData);

export const unassignedCodePoints = codePointsDataInstance.readBitfield(codePointsDataInstance.readUInt32BE());
export const commonlyMappedToNothing = codePointsDataInstance.readBitfield(codePointsDataInstance.readUInt32BE());
export const nonASCIIspaceCharacters = codePointsDataInstance.readBitfield(codePointsDataInstance.readUInt32BE());
export const prohibitedCharacters = codePointsDataInstance.readBitfield(codePointsDataInstance.readUInt32BE());
export const bidirectionalR_AL = codePointsDataInstance.readBitfield(codePointsDataInstance.readUInt32BE());
export const bidirectionalL = codePointsDataInstance.readBitfield(codePointsDataInstance.readUInt32BE());
