import { ObjectId } from 'bson';
import type { MongoError } from '../error';
import type { Connection } from './connection';
import type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';

/**
 * The base export class for all monitoring events published from the connection pool
 * @public
 * @category Event
 */
export abstract class ConnectionPoolMonitoringEvent {
  /** A timestamp when the event was created  */
  time: Date;
  /** The address (host/port pair) of the pool */
  address: string;
  /** @internal */
  abstract name:
    | 'CONNECTION_CHECK_OUT_FAILED'
    | 'CONNECTION_CHECK_OUT_STARTED'
    | 'CONNECTION_CHECKED_IN'
    | 'CONNECTION_CHECKED_OUT'
    | 'CONNECTION_CLOSED'
    | 'CONNECTION_CREATED'
    | 'CONNECTION_POOL_CLEARED'
    | 'CONNECTION_POOL_CLOSED'
    | 'CONNECTION_POOL_CREATED'
    | 'CONNECTION_POOL_READY'
    | 'CONNECTION_READY';

  /** @internal */
  constructor(pool: ConnectionPool) {
    this.time = new Date();
    this.address = pool.address;
  }

  /**
   * Static factory method to create a `ConnectionPoolMonitoringEvent` instance with the correct name
   * @param pool - The connection pool
   * @param name - The name of the event
   * @returns A new `ConnectionPoolMonitoringEvent` instance
   */
  static create(pool: ConnectionPool, name: string): ConnectionPoolMonitoringEvent {
    const event = new this(pool);
    event.name = name;
    return event;
  }
}

// ... (other event classes follow the same pattern)
