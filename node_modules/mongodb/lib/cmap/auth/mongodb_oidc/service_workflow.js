import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { BSON } from 'bson';

/**
 * Get the OIDC token from the specified credentials.
 */
export async function getToken(credentials) {
  const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;
  if (!tokenFile) {
    throw new Error('AWS_WEB_IDENTITY_TOKEN_FILE environment variable not set');
  }

  const token = fs.readFileSync(tokenFile, 'utf-8');
  return BSON.serialize({ jwt: token });
}


import { MongoClient } from 'mongodb';
import { AuthMechanism } from '../providers';
import { getToken } from './getToken';

/**
 * Common behaviour for OIDC device workflows.
 */
export class ServiceWorkflow {
  /**
   * Execute the workflow.
   */
  public async execute(connection: MongoClient, credentials) {
    const token = await getToken(credentials);
    const command = this.commandDocument(token);
    return connection.commandAsync(credentials.source, command);
  }

  /**
   * Get the document to add for speculative authentication.
   */
  public async speculativeAuth(credentials) {
    const token = await getToken(credentials);
    const document = this.commandDocument(token);
    return { speculativeAuthenticate: document };
  }

  /**
   * Create the saslStart command document.
   */
  private commandDocument(token) {
    return {
      saslStart: 1,
      mechanism: AuthMechanism.MONGODB_OIDC,
      payload: token
    };
  }
}
